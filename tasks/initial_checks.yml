---

- name: Verify masters flavor availability
  os_flavor_info:
    cloud: "{{ openstack_cloud_name }}"
    name: "{{ masters_flavor }}"
  register: masters_flavor_result

- name: Set masters_openstack_flavor variable
  set_fact:
    masters_openstack_flavor: "{{ masters_flavor_result.openstack_flavors }}"

- name: Fail when could not find masters flavor
  fail:
    msg: "Could not find masters flavor! Please check that flavor {{ masters_flavor }} exists on OpenStack"
  when: masters_openstack_flavor == []

- name: Verify nodes flavor availability
  os_flavor_info:
    cloud: "{{ openstack_cloud_name }}"
    name: "{{ nodes_flavor }}"
  register: nodes_flavor_result

- name: Set masters_openstack_flavor variable
  set_fact:
    nodes_openstack_flavor: "{{ nodes_flavor_result.openstack_flavors }}"

- name: Fail when could not find nodes flavor
  fail:
    msg: "Could not find nodes flavor! Please check that flavor {{ nodes_flavor }} exists on OpenStack"
  when: nodes_openstack_flavor == []

- name: Verify that external network exists
  os_networks_info:
    name: "{{ external_network }}"
  register: external_network_result
    
- name: Set external_network variable
  set_fact:
    openstack_external_network: "{{ external_network_result.openstack_networks }}"

- name: Fail when could not find external network
  fail:
    msg: "Could not find OpenStack external network {{ external_network }}!"
  when: openstack_external_network == []

- name: Fail when provided network is not external
  fail:
    msg: "Network {{ external_network }} is not external!"
  when:
    - openstack_external_network[0]['router:external'] != true
    - skip_external_network_check is not defined

- name: Fail when openshift-install binary not found
  ansible.builtin.command: which openshift-install
  register: which_neutron_result
  failed_when: which_neutron_result.rc == 1

- name: Fail when swift binary not found
  ansible.builtin.command: which swift
  register: which_swift_result
  failed_when: which_swift_result.rc == 1

- name: Fail when neutron binary not found
  ansible.builtin.command: which neutron
  register: which_neutron_result
  failed_when: which_neutron_result.rc == 1

- name: Verify if subnet_range network exists
  os_networks_info:
    name: "{{ subnet_range }}"
  register: subnet_range_result

- name: Fail if network (subnet range) does exists already
  fail:
    msg: "Network (Subnet range) for OCP cluster is already taken, please choose different, or specify variable use_existing_subnet_range"
  when:
    - subnet_range_result.openstack_networks != []
    - use_existing_subnet_range is not defined 

- name: Fail when lb_api_fip_address and lb_ingress_fip_address set to the same IP
  fail:
    msg: "lb_api_fip_address set to same value as lb_ingress_fip_address!"
  when: lb_api_fip_address == lb_ingress_fip_address

- name: Fail when openshift_api_fip and openshift_ingress_fip address set to the same IP
  fail:
    msg: "openshift_api_fip address set to same value as openshift_api_fip!"
  when: openshift_api_fip == openshift_ingress_fip

- name: Verify that Red Hat CoreOS image is already uploaded to the OpenStack
  os_image_info:
    image: "{{ rhcos_image_name }}"
  register: rhcos_image_name_result

- name: Set rhcos_image_name result as fact
  set_fact:
    openstack_rhcos_image_name: "{{ rhcos_image_name_result.openstack_image }}"

- name: Verify if local Red Hat CoreOS image file is provided
  local_action: stat path="{{ rhcos_image_file }}"
  register: rhcos_image_file_result

- name: Fail if both OpenStack and local Red Hat CoreOS images were not found
  fail:
    msg: "Could not find {{ rhcos_image_name }} on OpenStack, nor {{ rhcos_image_file }} locally!"
  when: (openstack_rhcos_image_name == "") and (rhcos_image_file_result['stat']['exists'] != true)
